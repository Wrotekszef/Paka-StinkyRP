import { Vector3 } from '../';
import { DrivingStyle, HelmetType, RagdollType, SpeechModifier, VehicleSeat } from '../enums';
import { WeaponHash } from '../hashes';
import { Entity, Vehicle } from './';
export declare class Ped extends Entity {
    static exists(ped: Ped): boolean;
    private readonly speechModifierNames;
    constructor(handle: number);
    readonly CurrentVehicle: Vehicle;
    readonly LastVehicle: Vehicle;
    readonly VehicleTryingToEnter: Vehicle;
    DrivingStyle: DrivingStyle;
    isInAnyVehicle(): boolean;
    isInVehicle(vehicle: Vehicle): boolean;
    isSittingInAnyVehicle(): boolean;
    isSittingInVehicle(vehicle: Vehicle): boolean;
    setIntoVehicle(vehicle: Vehicle, seat: VehicleSeat): void;
    kill(): void;
    resurrect(): void;
    resetVisibleDamage(): void;
    clearBloodDamage(): void;
    readonly IsInGroup: boolean;
    NeverLeavesGroup: boolean;
    leaveGroup(): void;
    playAmbientSpeed(speechName: string, voiceName?: string, modifier?: SpeechModifier): void;
    applyDamage(damageAmount: number): void;
    hasBeenDamagedBy(weapon: WeaponHash): boolean;
    hasBeenDamagedByAnyWeapon(): boolean;
    hasBeenDamagedByAnyMeleeWeapon(): boolean;
    clearLastWeaponDamage(): void;
    giveWeapon(weapon: WeaponHash, ammoCount?: number, isHidden?: boolean, equipNow?: boolean): void;
    removeWeapon(weapon: WeaponHash): void;
    removeAllWeapons(): void;
    getLastWeaponImpactPosition(): Vector3;
    CanRagdoll: boolean;
    ragdoll(duration?: number, ragdollType?: RagdollType): void;
    cancelRagdoll(): void;
    giveHelmet(canBeRemovedByPed: boolean, helmetType: HelmetType, textureIndex: number): void;
    removeHelmet(instantly: boolean): void;
    openParachute(): void;
    getConfigFlag(flagId: number): boolean;
    setConfigFlag(flagId: number, value: boolean): void;
    resetConfigFlag(flagId: number): void;
    clone(heading: number): Ped;
    exists(): boolean;
}
