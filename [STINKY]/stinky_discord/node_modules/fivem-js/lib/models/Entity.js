"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Game_1 = require("../Game");
const utils_1 = require("../utils");
const _1 = require("./");
class Entity {
    constructor(handle) {
        this.handle = handle;
    }
    get Handle() {
        return this.handle;
    }
    get Health() {
        return GetEntityHealth(this.handle);
    }
    set Health(amount) {
        SetEntityHealth(this.handle, amount);
    }
    get MaxHealth() {
        return GetEntityMaxHealth(this.handle) - 100;
    }
    set MaxHealth(amount) {
        SetEntityMaxHealth(this.handle, amount + 100);
    }
    isDead() {
        return IsEntityDead(this.handle) ? true : false;
    }
    isAlive() {
        return !this.isDead();
    }
    get Position() {
        const coords = GetEntityCoords(this.handle, false);
        return new utils_1.Vector3(coords[0], coords[1], coords[2]);
    }
    set Position(position) {
        SetEntityCoords(this.handle, position.x, position.y, position.z, false, false, false, true);
    }
    set PositionNoOffset(position) {
        SetEntityCoordsNoOffset(this.handle, position.x, position.y, position.z, true, true, true);
    }
    get Heading() {
        return GetEntityHeading(this.handle);
    }
    set Heading(heading) {
        SetEntityHeading(this.handle, heading);
    }
    get IsCollisionEnabled() {
        return !!!GetEntityCollisonDisabled(this.handle);
    }
    set IsCollisionEnabled(value) {
        SetEntityCollision(this.handle, value, false);
    }
    get Bones() {
        if (this.bones === null) {
            this.bones = new _1.EntityBoneCollection(this);
        }
        return this.bones;
    }
    exists() {
        return DoesEntityExist(this.handle) ? true : false;
    }
    delete() {
        if (this.handle !== Game_1.Game.PlayerPed.Handle) {
            SetEntityAsMissionEntity(this.handle, false, true);
            DeleteEntity(this.handle);
        }
    }
}
exports.Entity = Entity;
